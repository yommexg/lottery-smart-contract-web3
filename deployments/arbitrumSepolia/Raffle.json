{
  "address": "0x1Ce97e620a2cd7B539dCE2014318a43B2c9BE5Eb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d9a948cee922017a33d0cfb8cb0d13e5971256e31554ee2abd3004999793a2d",
  "receipt": {
    "to": null,
    "from": "0xC638A6a162fE1cf1Ac658C58Bd2761c38690a0f9",
    "contractAddress": "0x1Ce97e620a2cd7B539dCE2014318a43B2c9BE5Eb",
    "transactionIndex": 1,
    "gasUsed": "1235452",
    "logsBloom": "0x
    "blockHash": "0x4d49febabd4d609f0c3cc80676a983b62dbd175bd56dc413853116ee5baa0d5e",
    "transactionHash": "0x4d9a948cee922017a33d0cfb8cb0d13e5971256e31554ee2abd3004999793a2d",
    "logs": [],
    "blockNumber": 97935643,
    "cumulativeGasUsed": "1235452",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb1D4538B4571d411F07960EF2838Ce337FE1E80E",
    "10000000000000000",
    "0x787d74caea10b2b357790d5b5247c2f63d1d91572a9846f780606e4d953677ae",
    "51968135519300855685037069103954343410572581087530810738887994229881903857697",
    "500000",
    30
  ],
  "numDeployments": 1,
  "solcInputHash": "8277c3cef1003e17f9b7e3e78e57e183",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Yomi-Olugbodi Boluwatife\",\"details\":\"This implements ChainlinkVRF v2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that ChainLink Keeper nodes call they look for the `upkeepNeeded`to return true\"}},\"title\":\"A sample Raffle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating an untamperable decentralized smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xf504b227c442cd4ed31b336b7bd15cfcb23220c84c26e750975c7e7d959125aa\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x619d9d975540d65ef8d6332a67cbd0dda5b0f95b120b8da56695ed50c2f9fc30\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\r\\nimport {AutomationCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\n\\r\\nerror Raffle__NotEnoughETHEntered();\\r\\nerror Raffle__TransferFailed();\\r\\nerror Raffle__NotOpen();\\r\\nerror Raffle__UpkeepNotNeeded(\\r\\n    uint256 currentBalance,\\r\\n    uint256 numPlayers,\\r\\n    uint256 raffleState\\r\\n);\\r\\n\\r\\n/**\\r\\n * @title A sample Raffle Contract\\r\\n * @author Yomi-Olugbodi Boluwatife\\r\\n * @notice This contract is for creating an untamperable decentralized smart contract\\r\\n * @dev This implements ChainlinkVRF v2 and Chainlink Keepers\\r\\n */\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\r\\n    /* Types declarations */\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    } // uint 256 0 = OPEN, 1 = CALCULATING\\r\\n\\r\\n    /* State Variables */\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address payable[] private s_players;\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint256 private immutable i_subscriptionId;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n    /* Lottery Variables */\\r\\n    address private s_recentWinner;\\r\\n    RaffleState private s_raffleState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 private immutable i_interval;\\r\\n\\r\\n    /* Events */\\r\\n    event RaffleEnter(address indexed player);\\r\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed winner);\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        uint256 entranceFee,\\r\\n        bytes32 gasLane,\\r\\n        uint256 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n    function enterRaffle() public payable {\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert Raffle__NotEnoughETHEntered();\\r\\n        }\\r\\n\\r\\n        if (s_raffleState != RaffleState.OPEN) {\\r\\n            revert Raffle__NotOpen();\\r\\n        }\\r\\n\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit RaffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This is the function that ChainLink Keeper nodes call\\r\\n     * they look for the `upkeepNeeded`to return true\\r\\n     */\\r\\n    function checkUpkeep(bytes memory /* checkData */ )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */ )\\r\\n    {\\r\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\r\\n        bool hasPlayers = s_players.length > 0;\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\r\\n    }\\r\\n\\r\\n\\r\\nfunction performUpkeep(bytes calldata /* performData */) external override {\\r\\n    bool isOpen = RaffleState.OPEN == s_raffleState;\\r\\n    bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\r\\n    bool hasPlayers = s_players.length > 0;\\r\\n    bool hasBalance = address(this).balance > 0;\\r\\n    \\r\\n    // Declare upkeepNeeded here\\r\\n    bool upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\r\\n\\r\\n    if (!upkeepNeeded) {\\r\\n        revert Raffle__UpkeepNotNeeded(\\r\\n            address(this).balance,\\r\\n            s_players.length,\\r\\n            uint256(s_raffleState)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    s_raffleState = RaffleState.CALCULATING;\\r\\n    uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n        i_gasLane,\\r\\n        uint64(i_subscriptionId),\\r\\n        REQUEST_CONFIRMATIONS,\\r\\n        i_callbackGasLimit,\\r\\n        NUM_WORDS\\r\\n    );\\r\\n\\r\\n    emit RequestedRaffleWinner(requestId);\\r\\n}\\r\\n\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 /* requestId */,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\r\\n        address payable recentWinner = s_players[indexOfWinner];\\r\\n        s_recentWinner = recentWinner;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_players = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert Raffle__TransferFailed();\\r\\n        }\\r\\n        emit WinnerPicked(recentWinner);\\r\\n    }\\r\\n\\r\\n    // View / Pure functions\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleState) {\\r\\n        return s_raffleState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint256) {\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n\\r\\n    function getLatestTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getRequestConfirmations() public pure returns (uint256) {\\r\\n        return REQUEST_CONFIRMATIONS;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8e05a54bd44ad2b860ee69fa54f65148ae108672fb978c7e97b83b8ede430d3b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61016060405234801561001157600080fd5b5060405161180a38038061180a8339818101604052810190610033919061021c565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508261010081815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156100f1576100f06102a9565b5b0217905550426002819055508061014081815250505050505050506102d8565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061014182610116565b9050919050565b61015181610136565b811461015c57600080fd5b50565b60008151905061016e81610148565b92915050565b6000819050919050565b61018781610174565b811461019257600080fd5b50565b6000815190506101a48161017e565b92915050565b6000819050919050565b6101bd816101aa565b81146101c857600080fd5b50565b6000815190506101da816101b4565b92915050565b600063ffffffff82169050919050565b6101f9816101e0565b811461020457600080fd5b50565b600081519050610216816101f0565b92915050565b60008060008060008060c0878903121561023957610238610111565b5b600061024789828a0161015f565b965050602061025889828a01610195565b955050604061026989828a016101cb565b945050606061027a89828a01610195565b935050608061028b89828a01610207565b92505060a061029c89828a01610195565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516114bc61034e600039600081816105ad0152818161087001526108de0152600061072a01526000610707015260006106e6015260006106aa0152600081816102fa01526103f7015260008181610337015261038b01526114bc6000f3fe6080604052600436106100c25760003560e01c8063473f1ddc1161007f5780636e04ff0d116100595780636e04ff0d1461022557806391ad27b414610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b8063473f1ddc146101a457806353a2c19a146101cf5780635f1b0fd8146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c46565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610cd8565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e8c565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b50610165610564565b6040516101729190610c46565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610f43565b61056e565b005b3480156101b057600080fd5b506101b96107e7565b6040516101c69190610fd1565b60405180910390f35b3480156101db57600080fd5b506101e4610811565b6040516101f19190610c46565b60405180910390f35b34801561020657600080fd5b5061020f610820565b60405161021c9190610c46565b60405180910390f35b34801561023157600080fd5b5061024c600480360381019061024791906110a1565b61082d565b60405161025a929190611184565b60405180910390f35b34801561026f57600080fd5b506102786108da565b6040516102859190610c46565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b091906111b4565b610902565b6040516102c29190610fd1565b60405180910390f35b3480156102d757600080fd5b506102e0610949565b6040516102ed9190610c46565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de9291906111e1565b60405180910390fd5b6103f18282610955565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610c61565b5b600160149054906101000a900460ff16600181111561048557610484610c61565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b6000600160149054906101000a900460ff16600181111561059257610591610c61565b5b600060018111156105a6576105a5610c61565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426105da9190611239565b1190506000806000805490501190506000804711905060008380156105fc5750845b80156106055750815b801561060e5750825b90508061067c5747600080549050600160149054906101000a900460ff16600181111561063e5761063d610c61565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016106739392919061126d565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156106a1576106a0610c61565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161076b95949392919061131c565b6020604051808303816000875af115801561078a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae9190611384565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a25050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff16600181111561085557610854610c61565b5b6000600181111561086957610868610c61565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261089d9190611239565b119050600080600080549050119050600080471190508280156108bd5750835b80156108c65750805b80156108cf5750815b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000808281548110610917576109166113b1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109705761096f6113b1565b5b6020026020010151610982919061140f565b90506000808281548110610999576109986113b1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a2d57610a2c610c61565b5b0217905550600067ffffffffffffffff811115610a4d57610a4c610d49565b5b604051908082528060200260200182016040528015610a7b5781602001602082028036833780820191505090505b5060009080519060200190610a91929190610b86565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610abf90611471565b60006040518083038185875af1925050503d8060008114610afc576040519150601f19603f3d011682016040523d82523d6000602084013e610b01565b606091505b5050905080610b3c576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bff579160200282015b82811115610bfe5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ba6565b5b509050610c0c9190610c10565b5090565b5b80821115610c29576000816000905550600101610c11565b5090565b6000819050919050565b610c4081610c2d565b82525050565b6000602082019050610c5b6000830184610c37565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610ca157610ca0610c61565b5b50565b6000819050610cb282610c90565b919050565b6000610cc282610ca4565b9050919050565b610cd281610cb7565b82525050565b6000602082019050610ced6000830184610cc9565b92915050565b6000604051905090565b600080fd5b600080fd5b610d1081610c2d565b8114610d1b57600080fd5b50565b600081359050610d2d81610d07565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d8182610d38565b810181811067ffffffffffffffff82111715610da057610d9f610d49565b5b80604052505050565b6000610db3610cf3565b9050610dbf8282610d78565b919050565b600067ffffffffffffffff821115610ddf57610dde610d49565b5b602082029050602081019050919050565b600080fd5b6000610e08610e0384610dc4565b610da9565b90508083825260208201905060208402830185811115610e2b57610e2a610df0565b5b835b81811015610e545780610e408882610d1e565b845260208401935050602081019050610e2d565b5050509392505050565b600082601f830112610e7357610e72610d33565b5b8135610e83848260208601610df5565b91505092915050565b60008060408385031215610ea357610ea2610cfd565b5b6000610eb185828601610d1e565b925050602083013567ffffffffffffffff811115610ed257610ed1610d02565b5b610ede85828601610e5e565b9150509250929050565b600080fd5b60008083601f840112610f0357610f02610d33565b5b8235905067ffffffffffffffff811115610f2057610f1f610ee8565b5b602083019150836001820283011115610f3c57610f3b610df0565b5b9250929050565b60008060208385031215610f5a57610f59610cfd565b5b600083013567ffffffffffffffff811115610f7857610f77610d02565b5b610f8485828601610eed565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fbb82610f90565b9050919050565b610fcb81610fb0565b82525050565b6000602082019050610fe66000830184610fc2565b92915050565b600080fd5b600067ffffffffffffffff82111561100c5761100b610d49565b5b61101582610d38565b9050602081019050919050565b82818337600083830152505050565b600061104461103f84610ff1565b610da9565b9050828152602081018484840111156110605761105f610fec565b5b61106b848285611022565b509392505050565b600082601f83011261108857611087610d33565b5b8135611098848260208601611031565b91505092915050565b6000602082840312156110b7576110b6610cfd565b5b600082013567ffffffffffffffff8111156110d5576110d4610d02565b5b6110e184828501611073565b91505092915050565b60008115159050919050565b6110ff816110ea565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561113f578082015181840152602081019050611124565b60008484015250505050565b600061115682611105565b6111608185611110565b9350611170818560208601611121565b61117981610d38565b840191505092915050565b600060408201905061119960008301856110f6565b81810360208301526111ab818461114b565b90509392505050565b6000602082840312156111ca576111c9610cfd565b5b60006111d884828501610d1e565b91505092915050565b60006040820190506111f66000830185610fc2565b6112036020830184610fc2565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061124482610c2d565b915061124f83610c2d565b92508282039050818111156112675761126661120a565b5b92915050565b60006060820190506112826000830186610c37565b61128f6020830185610c37565b61129c6040830184610c37565b949350505050565b6000819050919050565b6112b7816112a4565b82525050565b600067ffffffffffffffff82169050919050565b6112da816112bd565b82525050565b600061ffff82169050919050565b6112f7816112e0565b82525050565b600063ffffffff82169050919050565b611316816112fd565b82525050565b600060a08201905061133160008301886112ae565b61133e60208301876112d1565b61134b60408301866112ee565b611358606083018561130d565b611365608083018461130d565b9695505050505050565b60008151905061137e81610d07565b92915050565b60006020828403121561139a57611399610cfd565b5b60006113a88482850161136f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061141a82610c2d565b915061142583610c2d565b925082611435576114346113e0565b5b828206905092915050565b600081905092915050565b50565b600061145b600083611440565b91506114668261144b565b600082019050919050565b600061147c8261144e565b915081905091905056fea2646970667358221220de2a0ce4039f2981957274c6b23991fb54727c07dda4302bc6199cf556b7f64864736f6c634300081b0033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063473f1ddc1161007f5780636e04ff0d116100595780636e04ff0d1461022557806391ad27b414610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b8063473f1ddc146101a457806353a2c19a146101cf5780635f1b0fd8146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c46565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610cd8565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e8c565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b50610165610564565b6040516101729190610c46565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610f43565b61056e565b005b3480156101b057600080fd5b506101b96107e7565b6040516101c69190610fd1565b60405180910390f35b3480156101db57600080fd5b506101e4610811565b6040516101f19190610c46565b60405180910390f35b34801561020657600080fd5b5061020f610820565b60405161021c9190610c46565b60405180910390f35b34801561023157600080fd5b5061024c600480360381019061024791906110a1565b61082d565b60405161025a929190611184565b60405180910390f35b34801561026f57600080fd5b506102786108da565b6040516102859190610c46565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b091906111b4565b610902565b6040516102c29190610fd1565b60405180910390f35b3480156102d757600080fd5b506102e0610949565b6040516102ed9190610c46565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de9291906111e1565b60405180910390fd5b6103f18282610955565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462610c61565b5b600160149054906101000a900460ff16600181111561048557610484610c61565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b6000600160149054906101000a900460ff16600181111561059257610591610c61565b5b600060018111156105a6576105a5610c61565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426105da9190611239565b1190506000806000805490501190506000804711905060008380156105fc5750845b80156106055750815b801561060e5750825b90508061067c5747600080549050600160149054906101000a900460ff16600181111561063e5761063d610c61565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016106739392919061126d565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156106a1576106a0610c61565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161076b95949392919061131c565b6020604051808303816000875af115801561078a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae9190611384565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a25050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff16600181111561085557610854610c61565b5b6000600181111561086957610868610c61565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261089d9190611239565b119050600080600080549050119050600080471190508280156108bd5750835b80156108c65750805b80156108cf5750815b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000808281548110610917576109166113b1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109705761096f6113b1565b5b6020026020010151610982919061140f565b90506000808281548110610999576109986113b1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a2d57610a2c610c61565b5b0217905550600067ffffffffffffffff811115610a4d57610a4c610d49565b5b604051908082528060200260200182016040528015610a7b5781602001602082028036833780820191505090505b5060009080519060200190610a91929190610b86565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610abf90611471565b60006040518083038185875af1925050503d8060008114610afc576040519150601f19603f3d011682016040523d82523d6000602084013e610b01565b606091505b5050905080610b3c576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bff579160200282015b82811115610bfe5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ba6565b5b509050610c0c9190610c10565b5090565b5b80821115610c29576000816000905550600101610c11565b5090565b6000819050919050565b610c4081610c2d565b82525050565b6000602082019050610c5b6000830184610c37565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610ca157610ca0610c61565b5b50565b6000819050610cb282610c90565b919050565b6000610cc282610ca4565b9050919050565b610cd281610cb7565b82525050565b6000602082019050610ced6000830184610cc9565b92915050565b6000604051905090565b600080fd5b600080fd5b610d1081610c2d565b8114610d1b57600080fd5b50565b600081359050610d2d81610d07565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d8182610d38565b810181811067ffffffffffffffff82111715610da057610d9f610d49565b5b80604052505050565b6000610db3610cf3565b9050610dbf8282610d78565b919050565b600067ffffffffffffffff821115610ddf57610dde610d49565b5b602082029050602081019050919050565b600080fd5b6000610e08610e0384610dc4565b610da9565b90508083825260208201905060208402830185811115610e2b57610e2a610df0565b5b835b81811015610e545780610e408882610d1e565b845260208401935050602081019050610e2d565b5050509392505050565b600082601f830112610e7357610e72610d33565b5b8135610e83848260208601610df5565b91505092915050565b60008060408385031215610ea357610ea2610cfd565b5b6000610eb185828601610d1e565b925050602083013567ffffffffffffffff811115610ed257610ed1610d02565b5b610ede85828601610e5e565b9150509250929050565b600080fd5b60008083601f840112610f0357610f02610d33565b5b8235905067ffffffffffffffff811115610f2057610f1f610ee8565b5b602083019150836001820283011115610f3c57610f3b610df0565b5b9250929050565b60008060208385031215610f5a57610f59610cfd565b5b600083013567ffffffffffffffff811115610f7857610f77610d02565b5b610f8485828601610eed565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fbb82610f90565b9050919050565b610fcb81610fb0565b82525050565b6000602082019050610fe66000830184610fc2565b92915050565b600080fd5b600067ffffffffffffffff82111561100c5761100b610d49565b5b61101582610d38565b9050602081019050919050565b82818337600083830152505050565b600061104461103f84610ff1565b610da9565b9050828152602081018484840111156110605761105f610fec565b5b61106b848285611022565b509392505050565b600082601f83011261108857611087610d33565b5b8135611098848260208601611031565b91505092915050565b6000602082840312156110b7576110b6610cfd565b5b600082013567ffffffffffffffff8111156110d5576110d4610d02565b5b6110e184828501611073565b91505092915050565b60008115159050919050565b6110ff816110ea565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561113f578082015181840152602081019050611124565b60008484015250505050565b600061115682611105565b6111608185611110565b9350611170818560208601611121565b61117981610d38565b840191505092915050565b600060408201905061119960008301856110f6565b81810360208301526111ab818461114b565b90509392505050565b6000602082840312156111ca576111c9610cfd565b5b60006111d884828501610d1e565b91505092915050565b60006040820190506111f66000830185610fc2565b6112036020830184610fc2565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061124482610c2d565b915061124f83610c2d565b92508282039050818111156112675761126661120a565b5b92915050565b60006060820190506112826000830186610c37565b61128f6020830185610c37565b61129c6040830184610c37565b949350505050565b6000819050919050565b6112b7816112a4565b82525050565b600067ffffffffffffffff82169050919050565b6112da816112bd565b82525050565b600061ffff82169050919050565b6112f7816112e0565b82525050565b600063ffffffff82169050919050565b611316816112fd565b82525050565b600060a08201905061133160008301886112ae565b61133e60208301876112d1565b61134b60408301866112ee565b611358606083018561130d565b611365608083018461130d565b9695505050505050565b60008151905061137e81610d07565b92915050565b60006020828403121561139a57611399610cfd565b5b60006113a88482850161136f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061141a82610c2d565b915061142583610c2d565b925082611435576114346113e0565b5b828206905092915050565b600081905092915050565b50565b600061145b600083611440565b91506114668261144b565b600082019050919050565b600061147c8261144e565b915081905091905056fea2646970667358221220de2a0ce4039f2981957274c6b23991fb54727c07dda4302bc6199cf556b7f64864736f6c634300081b0033",
  "devdoc": {
    "author": "Yomi-Olugbodi Boluwatife",
    "details": "This implements ChainlinkVRF v2 and Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that ChainLink Keeper nodes call they look for the `upkeepNeeded`to return true"
      }
    },
    "title": "A sample Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating an untamperable decentralized smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 207,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 224,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 227,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)202"
      },
      {
        "astId": 229,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)202": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}